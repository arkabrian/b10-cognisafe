// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: attendance.query.sql

package sqlc

import (
	"context"
)

const attend = `-- name: Attend :one
INSERT INTO Attendance (
    lab_session_id,
    ip_address,
    mac_address
) VALUES ( $1, $2, $3 ) RETURNING lab_session_id, ip_address, mac_address, fall, gas
`

type AttendParams struct {
	LabSessionID string `json:"lab_session_id"`
	IpAddress    string `json:"ip_address"`
	MacAddress   string `json:"mac_address"`
}

func (q *Queries) Attend(ctx context.Context, arg AttendParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, attend, arg.LabSessionID, arg.IpAddress, arg.MacAddress)
	var i Attendance
	err := row.Scan(
		&i.LabSessionID,
		&i.IpAddress,
		&i.MacAddress,
		&i.Fall,
		&i.Gas,
	)
	return i, err
}

const getValidAttendance = `-- name: GetValidAttendance :many
SELECT lab_session_id,
    ip_address,
    mac_address FROM Attendance
`

type GetValidAttendanceRow struct {
	LabSessionID string `json:"lab_session_id"`
	IpAddress    string `json:"ip_address"`
	MacAddress   string `json:"mac_address"`
}

func (q *Queries) GetValidAttendance(ctx context.Context) ([]GetValidAttendanceRow, error) {
	rows, err := q.db.QueryContext(ctx, getValidAttendance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetValidAttendanceRow
	for rows.Next() {
		var i GetValidAttendanceRow
		if err := rows.Scan(&i.LabSessionID, &i.IpAddress, &i.MacAddress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
