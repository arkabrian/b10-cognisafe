// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account.query.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  labname, email, password_hash
) VALUES (
  $1, $2, $3
)
RETURNING lab_id, labname, email, password_hash, created_at
`

type CreateAccountParams struct {
	Labname      string `json:"labname"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Labname, arg.Email, arg.PasswordHash)
	var i Account
	err := row.Scan(
		&i.LabID,
		&i.Labname,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM account
WHERE lab_id = $1
RETURNING lab_id, labname, email, password_hash, created_at
`

func (q *Queries) DeleteAccount(ctx context.Context, labID string) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, labID)
	var i Account
	err := row.Scan(
		&i.LabID,
		&i.Labname,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT lab_id, labname, email, password_hash, created_at FROM account
WHERE lab_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, labID string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, labID)
	var i Account
	err := row.Scan(
		&i.LabID,
		&i.Labname,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountbyEmail = `-- name: GetAccountbyEmail :one
SELECT lab_id, labname, email, password_hash, created_at FROM account
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAccountbyEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountbyEmail, email)
	var i Account
	err := row.Scan(
		&i.LabID,
		&i.Labname,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}
