// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: labSession.query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addAttendance = `-- name: AddAttendance :one
UPDATE LabSession
SET attendance = attendance + 1
WHERE lab_session_id = $1
RETURNING lab_session_id, lab_id, pic, module_topic, start_time, end_time, location, attendance, indicator
`

func (q *Queries) AddAttendance(ctx context.Context, labSessionID string) (Labsession, error) {
	row := q.db.QueryRowContext(ctx, addAttendance, labSessionID)
	var i Labsession
	err := row.Scan(
		&i.LabSessionID,
		&i.LabID,
		&i.Pic,
		&i.ModuleTopic,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.Attendance,
		&i.Indicator,
	)
	return i, err
}

const createLabSession = `-- name: CreateLabSession :one
INSERT INTO LabSession (
    lab_id,
    pic,
    module_topic,
    start_time,
    end_time,
    location
) VALUES ( $1, $2, $3, $4, $5, $6 ) RETURNING lab_session_id, lab_id, pic, module_topic, start_time, end_time, location, attendance, indicator
`

type CreateLabSessionParams struct {
	LabID       sql.NullString `json:"lab_id"`
	Pic         sql.NullString `json:"pic"`
	ModuleTopic sql.NullString `json:"module_topic"`
	StartTime   sql.NullTime   `json:"start_time"`
	EndTime     sql.NullTime   `json:"end_time"`
	Location    sql.NullString `json:"location"`
}

func (q *Queries) CreateLabSession(ctx context.Context, arg CreateLabSessionParams) (Labsession, error) {
	row := q.db.QueryRowContext(ctx, createLabSession,
		arg.LabID,
		arg.Pic,
		arg.ModuleTopic,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
	)
	var i Labsession
	err := row.Scan(
		&i.LabSessionID,
		&i.LabID,
		&i.Pic,
		&i.ModuleTopic,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.Attendance,
		&i.Indicator,
	)
	return i, err
}

const endLabSession = `-- name: EndLabSession :one
UPDATE LabSession
SET attendance = attendance + 1
WHERE lab_session_id = $1
RETURNING lab_session_id, lab_id, pic, module_topic, start_time, end_time, location, attendance, indicator
`

func (q *Queries) EndLabSession(ctx context.Context, labSessionID string) (Labsession, error) {
	row := q.db.QueryRowContext(ctx, endLabSession, labSessionID)
	var i Labsession
	err := row.Scan(
		&i.LabSessionID,
		&i.LabID,
		&i.Pic,
		&i.ModuleTopic,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.Attendance,
		&i.Indicator,
	)
	return i, err
}

const getFallGasData = `-- name: GetFallGasData :one
SELECT fall, gas FROM FallGas
`

func (q *Queries) GetFallGasData(ctx context.Context) (Fallga, error) {
	row := q.db.QueryRowContext(ctx, getFallGasData)
	var i Fallga
	err := row.Scan(&i.Fall, &i.Gas)
	return i, err
}

const getLabSession = `-- name: GetLabSession :one
SELECT lab_session_id, lab_id, pic, module_topic, start_time, end_time, location, attendance, indicator FROM LabSession
WHERE lab_session_id = $1 LIMIT 1
`

func (q *Queries) GetLabSession(ctx context.Context, labSessionID string) (Labsession, error) {
	row := q.db.QueryRowContext(ctx, getLabSession, labSessionID)
	var i Labsession
	err := row.Scan(
		&i.LabSessionID,
		&i.LabID,
		&i.Pic,
		&i.ModuleTopic,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.Attendance,
		&i.Indicator,
	)
	return i, err
}

const updateFallFalse = `-- name: UpdateFallFalse :one
UPDATE FallGas SET fall = 0 RETURNING fall, gas
`

func (q *Queries) UpdateFallFalse(ctx context.Context) (Fallga, error) {
	row := q.db.QueryRowContext(ctx, updateFallFalse)
	var i Fallga
	err := row.Scan(&i.Fall, &i.Gas)
	return i, err
}

const updateFallTrue = `-- name: UpdateFallTrue :one
UPDATE FallGas SET fall = 1 RETURNING fall, gas
`

func (q *Queries) UpdateFallTrue(ctx context.Context) (Fallga, error) {
	row := q.db.QueryRowContext(ctx, updateFallTrue)
	var i Fallga
	err := row.Scan(&i.Fall, &i.Gas)
	return i, err
}

const updateGasFalse = `-- name: UpdateGasFalse :one
UPDATE FallGas SET gas = 0 RETURNING fall, gas
`

func (q *Queries) UpdateGasFalse(ctx context.Context) (Fallga, error) {
	row := q.db.QueryRowContext(ctx, updateGasFalse)
	var i Fallga
	err := row.Scan(&i.Fall, &i.Gas)
	return i, err
}

const updateGasTrue = `-- name: UpdateGasTrue :one
UPDATE FallGas SET gas = 1 RETURNING fall, gas
`

func (q *Queries) UpdateGasTrue(ctx context.Context) (Fallga, error) {
	row := q.db.QueryRowContext(ctx, updateGasTrue)
	var i Fallga
	err := row.Scan(&i.Fall, &i.Gas)
	return i, err
}
